// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type BlogPost = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'BlogPost'
  /** The title of the blog post */
  title: string
  /** The description of the blog post */
  description?: string | undefined
  /** The date of the blog post */
  date: IsoDateTimeString
  published: boolean
  /** The author of the blog post */
  author: string
  tags: string[]
  /** MDX file body */
  body: MDX
  url: string
  slug: string
}

export type ChangelogEntry = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'ChangelogEntry'
  /** The title of the changelog entry */
  title: string
  /** The date of the changelog entry */
  date: IsoDateTimeString
  /** The version number */
  version?: string | undefined
  published: boolean
  /** MDX file body */
  body: MDX
  url: string
  slug: string
}

export type Doc = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Doc'
  /** The title of the document */
  title: string
  /** The description of the document */
  description?: string | undefined
  published: boolean
  /** Order for navigation */
  order: number
  /** MDX file body */
  body: MDX
  url: string
  slug: string
}

export type LegalDoc = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'LegalDoc'
  /** The title of the legal document */
  title: string
  /** The description of the legal document */
  description?: string | undefined
  /** When the document was last updated */
  lastUpdated: IsoDateTimeString
  published: boolean
  /** MDX file body */
  body: MDX
  url: string
  slug: string
}  

/** Nested types */
  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = BlogPost | ChangelogEntry | Doc | LegalDoc
export type DocumentTypeNames = 'BlogPost' | 'ChangelogEntry' | 'Doc' | 'LegalDoc'

export type NestedTypes = never
export type NestedTypeNames = never

export type DataExports = {
  allDocuments: DocumentTypes[]
  allDocs: Doc[]
  allBlogPosts: BlogPost[]
  allChangelogEntries: ChangelogEntry[]
  allLegalDocs: LegalDoc[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  BlogPost: BlogPost
  ChangelogEntry: ChangelogEntry
  Doc: Doc
  LegalDoc: LegalDoc
}

export type NestedTypeMap = {

}

 