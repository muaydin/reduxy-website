{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\n\nexport const Doc = defineDocumentType(() => ({\n    name: 'Doc',\n    filePathPattern: `docs/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            description: 'The title of the document',\n            required: true,\n        },\n        description: {\n            type: 'string',\n            description: 'The description of the document',\n        },\n        published: {\n            type: 'boolean',\n            default: true,\n        },\n        order: {\n            type: 'number',\n            description: 'Order for navigation',\n            default: 0,\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (doc) => `/docs/${doc._raw.flattenedPath.replace('docs/', '')}`,\n        },\n        slug: {\n            type: 'string',\n            resolve: (doc) => doc._raw.flattenedPath.replace('docs/', ''),\n        },\n    },\n}))\n\nexport const BlogPost = defineDocumentType(() => ({\n    name: 'BlogPost',\n    filePathPattern: `blog/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            description: 'The title of the blog post',\n            required: true,\n        },\n        description: {\n            type: 'string',\n            description: 'The description of the blog post',\n        },\n        date: {\n            type: 'date',\n            description: 'The date of the blog post',\n            required: true,\n        },\n        published: {\n            type: 'boolean',\n            default: true,\n        },\n        author: {\n            type: 'string',\n            description: 'The author of the blog post',\n            default: 'Reduxy Team',\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n            default: [],\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (post) => `/blog/${post._raw.flattenedPath.replace('blog/', '')}`,\n        },\n        slug: {\n            type: 'string',\n            resolve: (post) => post._raw.flattenedPath.replace('blog/', ''),\n        },\n    },\n}))\n\nexport const ChangelogEntry = defineDocumentType(() => ({\n    name: 'ChangelogEntry',\n    filePathPattern: `changelog/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            description: 'The title of the changelog entry',\n            required: true,\n        },\n        date: {\n            type: 'date',\n            description: 'The date of the changelog entry',\n            required: true,\n        },\n        version: {\n            type: 'string',\n            description: 'The version number',\n        },\n        published: {\n            type: 'boolean',\n            default: true,\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (entry) => `/changelog#${entry._raw.flattenedPath.replace('changelog/', '')}`,\n        },\n        slug: {\n            type: 'string',\n            resolve: (entry) => entry._raw.flattenedPath.replace('changelog/', ''),\n        },\n    },\n}))\n\nexport const LegalDoc = defineDocumentType(() => ({\n    name: 'LegalDoc',\n    filePathPattern: `legal/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            description: 'The title of the legal document',\n            required: true,\n        },\n        description: {\n            type: 'string',\n            description: 'The description of the legal document',\n        },\n        lastUpdated: {\n            type: 'date',\n            description: 'When the document was last updated',\n            required: true,\n        },\n        published: {\n            type: 'boolean',\n            default: true,\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (doc) => `/legal/${doc._raw.flattenedPath.replace('legal/', '')}`,\n        },\n        slug: {\n            type: 'string',\n            resolve: (doc) => doc._raw.flattenedPath.replace('legal/', ''),\n        },\n    },\n}))\n\nexport default makeSource({\n    contentDirPath: './content',\n    documentTypes: [Doc, BlogPost, ChangelogEntry, LegalDoc],\n    disableImportAliasWarning: true,\n    mdx: {\n        remarkPlugins: [],\n        rehypePlugins: [\n            rehypeSlug,\n            [\n                rehypeAutolinkHeadings,\n                {\n                    behavior: 'wrap',\n                    properties: {\n                        className: ['anchor'],\n                    },\n                },\n            ],\n        ],\n    },\n}) "],
  "mappings": "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",
  "names": []
}
